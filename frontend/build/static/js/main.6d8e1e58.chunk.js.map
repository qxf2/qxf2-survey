{"version":3,"sources":["components/NavBar.js","pages/NotFoundPage.js","pages/data/urlConf.js","pages/data/employeeList.js","pages/QuestionForm.js","pages/ConfirmationPage.js","pages/SurveyPage.js","pages/login.js","pages/AdminPage.js","pages/DashboardPage.js","pages/data/SymmetryData.js","pages/data/OverallData.js","pages/data/CloudData.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","to","NotFoundPage","style","backgroundColor","position","top","bottom","left","right","height","width","margin","padding","fontFamily","fontSize","textAlign","textTransform","textShadow","color","id","url","axios","defaults","headers","common","process","data","get","URL","then","response","i","toLowerCase","push","label","value","catch","error","console","log","options","QuestionForm","setState","props","React","useState","selectedHelp","setSelectedHelp","tags","setTags","selectedHelped","setSelectedHelped","useEffect","className","name","type","onChange","handleChange","href","newTags","labelledBy","Button","variant","size","block","button","disabled","step","isLast","onClick","next","ConfirmationPage","email","state","tagList","toString","whoHelp","JSON","parse","stringify","whomHelped","employees_data","setemployees_data","Loader","setLoader","url_conf","valid_email_flag","length","check_valid_email","surveyResponse","post","alert","map","join","conditional_render","SurveyPage","component","clientId","Login","showloginButton","setShowloginButton","showlogoutButton","setShowlogoutButton","unauthorized","setUnauthorized","useremail","setUseremail","buttonText","onSuccess","res","id_token","getAuthResponse","profileObj","xhr","XMLHttpRequest","open","setRequestHeader","onload","status","send","onFailure","cookiePolicy","isSignedIn","onLogoutSuccess","clear","AddEmployee","formData","updateFormData","e","target","trim","newEmployeeData","htmlFor","preventDefault","EmployeeTable","employees","setEmployees","getData","a","key","index","toUpperCase","ID","firstName","lastName","delete","del","filter","employee","ToRespond","AdminPage","LoginStatus","updateLoginStatus","float","marginRight","login_status","SymmetryData","labels","datasets","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","OverallData","words","text","DashboardPage","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6d8e1e58.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NavBar = () => (\r\n    <nav>\r\n        <ul>\r\n            <li>\r\n                <Link to=\"/\">Survey</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/dashboard\">Dashboard</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/admin\">Admin</Link>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nexport default NavBar;","import React from 'react';\r\n\r\nconst NotFoundPage = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: \"white\",\r\n        position: \"absolute\",\r\n        top: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        right: 0\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          height: \"150px\",\r\n          width: \"500px\",\r\n          margin: \"-75px 0 0 -250px\",\r\n          padding: \"20px\",\r\n          fontFamily: \"Arial\",\r\n          fontSize: \"75px\",\r\n          textAlign: \"center\",\r\n          textTransform: \"uppercase\",\r\n          textShadow: \"0 0 80px red, 0 0 30px FireBrick, 0 0 6px DarkRed\",\r\n          color: \"red\"\r\n        }}\r\n      >\r\n        <p\r\n          style={{\r\n            color: \"#fff\",\r\n            textShadow: \"0 0 80px #ffffff, 0 0 30px #008000, 0 0 6px #0000ff\"\r\n          }}\r\n        >\r\n          error\r\n        </p>\r\n        <p id=\"code\">404</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default NotFoundPage;","const url = \"https://survey-backend.qxf2.com\"\r\n\r\nexport default url;","import axios from \"axios\";\r\nimport URL from \"./urlConf\";\r\n\r\naxios.defaults.headers.common['User'] = process.env.REACT_APP_API_KEY\r\n\r\nvar data = [];\r\n\r\n\r\naxios.get(`${URL}/survey/admin/employees`)\r\n  .then(function (response) {\r\n    for (var i in response.data)\r\n    {\r\n      if (response.data[i]['status'].toLowerCase() === \"y\"){\r\n      data.push({label: response.data[i]['fullName'], value: response.data[i]['email']});\r\n    }}\r\n  })\r\n  .catch(function (error) {\r\n    console.log(error.response);\r\n  });\r\n\r\nconst options = data;\r\n\r\nexport default options;","import React, { useEffect } from \"react\";\r\nimport MultiSelect from \"react-multi-select-component\";\r\nimport \"@pathofdev/react-tag-input/build/index.css\";\r\nimport ReactTagInput from \"@pathofdev/react-tag-input\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport employeeList from \"./data/employeeList.js\";\r\n\r\nconst options = employeeList;\r\n\r\nfunction QuestionForm({ setState, ...props }) {\r\n  const [selectedHelp, setSelectedHelp] = React.useState([]);\r\n  const [tags, setTags] = React.useState([]);\r\n  const [selectedHelped, setSelectedHelped] = React.useState([]);\r\n\r\n  useEffect(() => {\r\n    setState(\"selectedHelp\", selectedHelp);\r\n  }, [selectedHelp, setState]);\r\n\r\n  useEffect(() => {\r\n    setState(\"tags\", tags);\r\n  }, [tags, setState]);\r\n\r\n  useEffect(() => {\r\n    setState(\"selectedHelped\", selectedHelped);\r\n  }, [selectedHelped, setState]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"form-group\">\r\n        <h3>Enter Email ID</h3>\r\n        <input\r\n          name=\"email\"\r\n          type=\"email\"\r\n          onChange={props.handleChange}\r\n          className=\"form-control\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"new-tech\">\r\n        <h3>What new technologies did you learn this week?<sub id=\"reference\"><a href=\"https://wiki.qxf2.com/home/r-d/newbie-orientation/what-technologies-did-you-work-on-this-week\">Help</a></sub></h3>\r\n        <ReactTagInput tags={tags} onChange={(newTags) => setTags(newTags)} />\r\n        <br></br>\r\n      </div>\r\n\r\n      <div className=\"who-helped\">\r\n        <h3>Who helped you this week?<sub id=\"reference\"><a href=\"https://wiki.qxf2.com/home/r-d/newbie-orientation/helping-others\">Help</a></sub></h3>\r\n        <MultiSelect\r\n          options={options}\r\n          value={selectedHelp}\r\n          onChange={setSelectedHelp}\r\n          labelledBy={\"Select\"}\r\n        />\r\n        <br></br>\r\n      </div>\r\n\r\n      <div className=\"whom-did-you-help\">\r\n        <h3>Whom did you help this week?<sub id=\"reference\"><a href=\"https://wiki.qxf2.com/home/r-d/newbie-orientation/helping-others\">Help</a></sub></h3>\r\n        <MultiSelect\r\n          options={options}\r\n          value={selectedHelped}\r\n          onChange={setSelectedHelped}\r\n          labelledBy={\"Select\"}\r\n        />\r\n        <br></br>\r\n      </div>\r\n      <div className=\"col-md-4 offset-md-4\">\r\n        <Button\r\n          variant=\"primary\"\r\n          size=\"lg\"\r\n          block\r\n          button=\"true\"\r\n          disabled={props.step.isLast()}\r\n          onClick={props.next}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionForm;","import React,{ useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport url_conf from \"./data/urlConf\"\r\n\r\naxios.defaults.headers.common['User'] = process.env.REACT_APP_API_KEY\r\n\r\nfunction ConfirmationPage(props) {\r\n  var email = props.state.email;\r\n  var tagList = props.state.tags.toString();\r\n  var whoHelp = JSON.parse(JSON.stringify(props.state.selectedHelp));\r\n  var whomHelped = JSON.parse(JSON.stringify(props.state.selectedHelped));\r\n  const [employees_data, setemployees_data]=useState([])\r\n  const [Loader, setLoader]=useState(true)\r\n\r\n  useEffect(() =>{\r\n    axios.get(`${url_conf}/survey/admin/employees`)\r\n    .then(response=>{\r\n      setemployees_data(response.data)\r\n      setLoader(false)\r\n    })\r\n  },[])\r\n\r\n  var check_valid_email=()=>{\r\n    var valid_email_flag=false\r\n    var i=0\r\n    for(i=0;i<=employees_data.length-1;i++)\r\n    {\r\n      if(employees_data[i]['email']===email)\r\n      {\r\n        valid_email_flag=true\r\n        break;\r\n      }\r\n    }\r\n\r\n    return valid_email_flag\r\n  }\r\n\r\n  var conditional_render=()=>{\r\n    if(Loader===false){\r\n\r\n      var valid_email=check_valid_email()\r\n      if(valid_email===true){\r\n        var surveyResponse = {\r\n          'userMail': email,\r\n          'listHelp': whoHelp,\r\n          'listHelped': whomHelped,\r\n          'listTags': tagList\r\n        }\r\n\r\n        if (surveyResponse !== \"\") {\r\n          axios.post(`${url_conf}/survey/response`, {data: surveyResponse})\r\n            .then(function (response) {\r\n              console.log(\"Post request: Success\")\r\n            })\r\n            .catch(function (error) {\r\n              console.log(\"Post request: Failed\")\r\n              console.log(error.response);\r\n            });\r\n        } else {\r\n          alert(\"Could not pass empty data\")\r\n        }\r\n        return (\r\n          <div className=\"jumbotron text-center\">\r\n            <h1 className=\"display-3\">Thank You!</h1>\r\n            <p className=\"lead\"><strong>Here is what we recorded!</strong></p>\r\n            <p><b>E-mail:</b> {email}</p>\r\n            <p><b>Who helped you?:</b> {whoHelp.map(whoHelp => whoHelp.label).join(', ')}</p>\r\n            <p><b>Whom did you help?:</b> {whomHelped.map(whomHelped => whomHelped.label).join(', ')} </p>\r\n            <p><b>Tags:</b> {tagList} </p>\r\n          </div>\r\n      );\r\n\r\n      }\r\n      else{\r\n        return (\r\n          <div className=\"jumbotron text-center\">\r\n            <p className=\"lead\"><strong>Please enter valid email</strong></p>\r\n          </div>\r\n        );\r\n\r\n      }\r\n    }\r\n    else{\r\n      return(<span>Loading.....</span>)\r\n    }\r\n  }\r\n\r\n  return (\r\n    conditional_render()\r\n  );\r\n}\r\n\r\nexport default ConfirmationPage;","import React from \"react\";\r\nimport { Steps, Step } from \"react-step-builder\";\r\nimport QuestionForm from \"./QuestionForm\";\r\nimport ConfirmationPage from \"./ConfirmationPage\";\r\n\r\nfunction SurveyPage() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Steps>\r\n        <Step component={QuestionForm} />\r\n        <Step component={ConfirmationPage} />\r\n      </Steps>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SurveyPage;\r\n","import React, { useState } from 'react';\r\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\r\nimport \"../Login.css\";\r\nimport url_conf from \"./data/urlConf\";\r\n\r\nconst clientId = process.env.REACT_APP_CLIENT_ID;\r\n\r\nexport default function Login({Login}) {\r\n\r\n    const [showloginButton, setShowloginButton] = useState(true);\r\n    const [showlogoutButton, setShowlogoutButton] = useState(false);\r\n    const [unauthorized, setUnauthorized] = useState(false);\r\n    const [useremail, setUseremail] = useState(null);\r\n    const onLoginSuccess = (res) => {\r\n        var id_token = res.getAuthResponse().id_token;\r\n        setUseremail(res.profileObj.email)\r\n        setShowloginButton(false);\r\n\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open('POST', `${url_conf}/survey/admin/admin-login`);\r\n        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n        xhr.setRequestHeader('User', process.env.REACT_APP_API_KEY);\r\n        xhr.onload = function() {\r\n          if(xhr.status === 200){\r\n            const login_status = true\r\n            Login(login_status, res.profileObj.email);\r\n          }\r\n          else{\r\n              setUnauthorized(true)\r\n          }\r\n        };\r\n        xhr.send('idtoken=' + id_token);\r\n        setShowlogoutButton(true);\r\n    };\r\n\r\n    const onLoginFailure = (res) => {\r\n        console.log('Login Failed:', res);\r\n    };\r\n\r\n    const onSignoutSuccess = () => {\r\n        alert(\"You have been logged out successfully\");\r\n        console.clear();\r\n        setShowloginButton(true);\r\n        setShowlogoutButton(false);\r\n        setUnauthorized(false)\r\n    };\r\n\r\n    return (\r\n        <div className = \"g-signin\">\r\n            { showloginButton ?\r\n            <h3>Sign in with Google</h3>\r\n             : null}\r\n\r\n            { showloginButton ?\r\n                <GoogleLogin\r\n                    clientId={clientId}\r\n                    buttonText=\"Sign In\"\r\n                    onSuccess={onLoginSuccess}\r\n                    onFailure={onLoginFailure}\r\n                    cookiePolicy={'single_host_origin'}\r\n                    isSignedIn={true}\r\n                /> : null}\r\n\r\n            { unauthorized ?\r\n                <span>Logged in as {useremail}<br></br> <h5>You are Unauthorized to view this page</h5></span>:null\r\n            }\r\n\r\n            { showlogoutButton ?\r\n                <GoogleLogout\r\n                    clientId={clientId}\r\n                    buttonText=\"Sign Out\"\r\n                    onLogoutSuccess={onSignoutSuccess}\r\n                >\r\n                </GoogleLogout> : null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport axios from \"axios\";\r\nimport url_conf from \"./data/urlConf\";\r\nimport LoginForm from \"./login\"\r\nimport { GoogleLogout } from 'react-google-login';\r\n\r\naxios.defaults.headers.common['User'] = process.env.REACT_APP_API_KEY\r\nconst clientId = process.env.REACT_APP_CLIENT_ID\r\n\r\nconst AddEmployee = () => {\r\n\r\n    const [formData, updateFormData] = React.useState([]);\r\n    const [employees_data, setemployees_data]=React.useState([])\r\n\r\n    useEffect(() =>{\r\n        axios.get(`${url_conf}/survey/admin/employees`)\r\n        .then(response=>{\r\n          setemployees_data(response.data)\r\n        })\r\n      },[])\r\n\r\n    const handleChange = (e) => {\r\n      updateFormData({\r\n        ...formData,\r\n        // Trimming any whitespace\r\n        [e.target.name]: e.target.value.trim()\r\n      });\r\n    };\r\n\r\n    var newEmployeeData = {\r\n        'firstName': formData[\"employee-first-name-input\"],\r\n        'lastName': formData[\"employee-last-name-input\"],\r\n        'email': formData[\"email-input\"],\r\n        'fullName': formData[\"employee-first-name-input\"] + \" \" + formData[\"employee-last-name-input\"],\r\n        'status': formData[\"status-input\"]\r\n      }\r\n\r\n    const HandleSubmit = (e) => {\r\n      e.preventDefault()\r\n      if (formData !== \"\") {\r\n\r\n        var valid_email_flag=false\r\n        var i=0\r\n        for(i=0;i<=employees_data.length-1;i++)\r\n        {\r\n        if(employees_data[i]['email']===newEmployeeData.email)\r\n        {\r\n            valid_email_flag=true\r\n            break;\r\n        }\r\n        }\r\n\r\n        if(valid_email_flag===false){\r\n\r\n            axios.post(`${url_conf}/survey/admin/new_employee` , {data: newEmployeeData})\r\n            .then(function (response) {\r\n                console.log(\"Post request: Success\")\r\n            })\r\n            .catch(function (error) {\r\n                console.log(\"Post request: Failed\")\r\n                console.log(error.response);\r\n\r\n            });\r\n        }\r\n        else{\r\n            alert(\"Email already exists\")\r\n        }\r\n\r\n    };}\r\n\r\n    return (\r\n        <div className=\"panel panel-primary\">\r\n        <div className=\"panel-heading\">\r\n            <h3 className=\"panel-title\"><strong>Add Employee</strong></h3>\r\n        </div>\r\n        <div className=\"panel-body\">\r\n            <form>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"employee-first-name-input\">First Name</label>\r\n                <input className=\"form-control\" name=\"employee-first-name-input\" type=\"text\" onChange={handleChange}></input>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"employee-last-name-input\">Last Name</label>\r\n                <input className=\"form-control\" name=\"employee-last-name-input\" type=\"text\" onChange={handleChange}></input>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"email-input\">E-Mail</label>\r\n                <input className=\"form-control\" name=\"email-input\" type=\"text\" onChange={handleChange}></input>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"status-input\">Employee Status (Y/N)</label>\r\n                <input className=\"form-control\" name=\"status-input\" type=\"text\" onChange={handleChange}></input>\r\n            </div>\r\n            <div className=\"col-md-4 offset-md-4\">\r\n                <Button variant=\"primary\" size=\"lg\" block onClick={HandleSubmit}>\r\n                    Submit\r\n            </Button>\r\n            </div>\r\n            </form>\r\n        </div>\r\n        </div>\r\n    );\r\n    };\r\n\r\nconst EmployeeTable = () => {\r\n\r\n    const URL = `${url_conf}/survey/admin/employees`\r\n    const [employees, setEmployees] = useState([])\r\n\r\n    const getData = async () => {\r\n        const response = await axios.get(URL)\r\n        setEmployees(response.data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])// eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const removeData = (id) => {\r\n        axios.delete(`${URL}/${id}`).then(res => {\r\n            const del = employees.filter(employee => id !== employee.ID)\r\n            setEmployees(del)\r\n        })\r\n    }\r\n\r\n\r\n    const renderHeader = () => {\r\n        let headerElement = ['ID', 'first_name', 'last_name', 'active_flag', 'email','operation']\r\n        return headerElement.map((key, index) => {\r\n            return <th key={index}>{key.toUpperCase()}</th>\r\n        })\r\n    }\r\n\r\n    const renderBody = () => {\r\n        return employees && employees.map(({ ID, firstName, lastName, status, email}) => {\r\n            return (\r\n                <tr key={ID}>\r\n                    <td>{ID}</td>\r\n                    <td>{firstName}</td>\r\n                    <td>{lastName}</td>\r\n                    <td>{status}</td>\r\n                    <td>{email}</td>\r\n                    <td className='operation'>\r\n                        <button className='button' onClick={() => removeData(ID)}>Delete</button>\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 id='title'>Employee Table</h1>\r\n            <table id='employees'>\r\n                <tbody>\r\n                    <tr>{renderHeader()}</tr>\r\n                    {renderBody()}\r\n                </tbody>\r\n            </table>\r\n            <br></br>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ToRespond = () => {\r\n\r\n    const URL = `${url_conf}/survey/admin/not_responded_users`\r\n    const [employees, setEmployees] = useState([])\r\n    const getData = async () => {\r\n        const response = await axios.get(URL)\r\n        setEmployees(response.data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])// eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const renderHeader = () => {\r\n        let headerElement = ['ID', 'Name']\r\n        return headerElement.map((key, index) => {\r\n            return <th key={index}>{key.toUpperCase()}</th>\r\n        })\r\n    }\r\n\r\n    const renderBody = () => {\r\n        return employees && employees.map(({ ID, firstName, lastName}) => {\r\n            return (\r\n                <tr key={ID}>\r\n                    <td>{ID}</td>\r\n                    <td>{firstName} {lastName}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 id='title'>Employees yet to Respond</h1>\r\n            <table id='employees'>\r\n                <tbody>\r\n                    <tr>{renderHeader()}</tr>\r\n                    {renderBody()}\r\n                </tbody>\r\n            </table>\r\n            <br></br>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AdminPage = () => {\r\n    const [LoginStatus, updateLoginStatus] = React.useState(false);\r\n    const [useremail, setUseremail] = React.useState(null)\r\n    const Login = (login_status,email) => {\r\n        if(login_status === true){\r\n            updateLoginStatus(true)\r\n            setUseremail(email)\r\n        }\r\n    }\r\n\r\n    const onSignoutSuccess = () => {\r\n        alert(\"You have been logged out successfully\");\r\n        console.clear();\r\n        updateLoginStatus(false)\r\n    };\r\n    return (\r\n        <div className=\"App\">\r\n        {\r\n        (LoginStatus === true)?\r\n        (\r\n        <>\r\n            <br></br>\r\n            <span style={{float:\"right\",marginRight:\"-350px\"}}>\r\n            <p style={{float:'center'}}>Logged in as {useremail}</p>\r\n            <GoogleLogout\r\n                clientId={clientId}\r\n                buttonText=\"Sign Out\"\r\n                onLogoutSuccess={onSignoutSuccess}\r\n            >\r\n            </GoogleLogout>\r\n            </span>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <EmployeeTable />\r\n            <AddEmployee />\r\n            <ToRespond />\r\n        </>\r\n        ): (<LoginForm Login={Login}/>)\r\n        }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminPage;","import React from 'react';\r\nimport ReactWordcloud from 'react-wordcloud';\r\nimport 'tippy.js/dist/tippy.css';\r\nimport 'tippy.js/animations/scale.css';\r\nimport {HorizontalBar} from 'react-chartjs-2';\r\nimport symData from './data/SymmetryData';\r\nimport overallData from './data/OverallData';\r\nimport CloudData from './data/CloudData';\r\n\r\n\r\nconst SymmetryData = symData;\r\nconst OverallData = overallData;\r\nconst words = CloudData;\r\n\r\nconst DashboardPage = () => {\r\n  return (\r\n    <>\r\n      <h2>Survey Analysis Dashboard</h2>\r\n      <div style={{ backgroundColor: '#efefef', height: '300px', width: '100%' }}>\r\n        <ReactWordcloud words={words} />\r\n      </div>\r\n\r\n      <div>\r\n        <h2>Symmetry Score</h2>\r\n        <HorizontalBar data={SymmetryData} />\r\n      </div>\r\n\r\n      <div>\r\n        <h2>Overall Data</h2>\r\n        <HorizontalBar data={OverallData} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DashboardPage;","const SymmetryData = {\r\n  labels: ['Shivahari', 'Arunkumar', 'Rahul', 'Raji', 'Avinash', 'Smitha', 'Rohit'],\r\n  datasets: [\r\n    {\r\n      label: \"Symmetry Score\",\r\n      backgroundColor: 'LightBlue',\r\n      borderColor: 'black',\r\n      borderWidth: 1,\r\n      hoverBackgroundColor: 'blue',\r\n      hoverBorderColor: 'black',\r\n      data: [234, 212, 110, 107, 67, 55, 16]\r\n    }\r\n  ]\r\n};\r\n\r\nexport default SymmetryData;","const OverallData = {\r\n  labels: ['Rohan Joshi', 'Mohan Kumar', 'Kiran CV', 'Akkul DN', 'Rajkumar', 'Smitha', 'Rohan Dudam'],\r\n  datasets: [\r\n    {\r\n      label: \"Symmetry Score\",\r\n      backgroundColor: 'LightBlue',\r\n      borderColor: 'black',\r\n      borderWidth: 1,\r\n      hoverBackgroundColor: 'blue',\r\n      hoverBorderColor: 'black',\r\n      data: [91, 100, 72, 91, 67, 66, 54]\r\n    }\r\n  ]\r\n};\r\n\r\nexport default OverallData;","const words = [\r\n  {\r\n    text: 'Python',\r\n    value: 75,\r\n  },\r\n  {\r\n    text: 'Git',\r\n    value: 55,\r\n  },\r\n  {\r\n    text: 'AWS',\r\n    value: 64,\r\n  },\r\n  {\r\n    text: 'API',\r\n    value: 33,\r\n  },\r\n  {\r\n    text: 'DynamoDB',\r\n    value: 43,\r\n  },\r\n  {\r\n    text: 'Elastic Beanstalk',\r\n    value: 26,\r\n  },\r\n  {\r\n    text: 'Github Actions',\r\n    value: 87,\r\n  },\r\n  {\r\n    text: 'AWS Lambda',\r\n    value: 50,\r\n  },\r\n  {\r\n    text: 'Neo4j',\r\n    value: 23,\r\n  },\r\n  {\r\n    text: 'MySQL',\r\n    value: 35,\r\n  },\r\n  {\r\n    text: 'Py2Neo',\r\n    value: 23,\r\n  },\r\n  {\r\n    text: 'SOAP',\r\n    value: 31,\r\n  },\r\n  {\r\n    text: 'Flask',\r\n    value: 12,\r\n  },\r\n  {\r\n    text: 'Django-REST',\r\n    value: 15,\r\n  },\r\n  {\r\n    text: 'GraphQL',\r\n    value: 30,\r\n  },\r\n  {\r\n    text: 'Selenium',\r\n    value: 18,\r\n  },\r\n]\r\n\r\nexport default words;","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n} from 'react-router-dom'\r\nimport './App.css';\r\nimport NavBar from './components/NavBar';\r\n// import firstQuestion from './components/firstQuestion';\r\nimport NotFoundPage from './pages/NotFoundPage';\r\nimport SurveyPage from './pages/SurveyPage';\r\nimport AdminPage from './pages/AdminPage';\r\nimport DashboardPage from './pages/DashboardPage';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <NavBar />\r\n        <div id=\"page-body\">\r\n          <Switch>\r\n            <Route path=\"/\" component={SurveyPage} exact />\r\n            <Route path=\"/survey\" component={SurveyPage} />\r\n            <Route path=\"/admin\" component={AdminPage} />\r\n            <Route path=\"/dashboard\" component={DashboardPage} />\r\n            <Route component={NotFoundPage} />\r\n         </Switch>\r\n         </div>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}